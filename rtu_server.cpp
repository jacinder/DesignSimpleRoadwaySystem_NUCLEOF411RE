#include "mbed.h"

UnbufferedSerial pc(CONSOLE_TX, CONSOLE_RX, 230400);
UnbufferedSerial wifi(ARDUINO_UNO_D8, ARDUINO_UNO_D2, 115200);
UnbufferedSerial modbus(PA_11,PA_12,9600); //tx, rx
DigitalOut modbus_transmit(PB_3);

/* Table of CRC values for high�Corder byte */
const uint8_t CRCTableHigh[] = {
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40
};

/* Table of CRC values for low�Corder byte */
const uint8_t CRCTableLow[] = {
  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
  0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
  0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
  0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
  0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
  0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
  0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
  0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
  0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
  0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
  0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
  0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
  0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
  0x40
};

uint8_t command[8] = {0x01,0x05,0,0,0,0,0,0};
uint16_t crc;

char ch;
char buffer[80];
Thread sock_thread;
char message[2048];
int pointer = 0;
int flag = 0;

uint16_t ModbusCRC_CheckTable(uint8_t *ptr, uint16_t len);
void led_on(uint8_t address);
void led_off(uint8_t address);

int main(){
    sprintf(buffer, "\r\n *****key <---> Wifi *****\r\n");
    pc.write(buffer, strlen(buffer));
    sprintf(buffer, "\r\nTCP and UDP Operation Using AT Commands\r\n");
    pc.write(buffer, strlen(buffer));

    sprintf(buffer, "AT+CWMODE=1\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "AT+CWJAP=\"tp_4ahnssu\",\"01051611257a\"\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "AT+CIPMUX=1\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "AT+CIPSERVER=1,50000\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "AT+CIFSR\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "AT+CIPRECVMODE=0\r\n");
    wifi.write(buffer, strlen(buffer));
    ThisThread::sleep_for(2000ms);

    sprintf(buffer, "*********server build complete*********\r\n");
    pc.write(buffer, strlen(buffer));

    modbus.format(8, SerialBase::None, 2);

    sprintf(buffer, "\r\n***** Modbus RTU Start *****\r\n");
    pc.write(buffer, strlen(buffer));

    modbus_transmit = 1;


    while(true){
        if(wifi.readable()){
            wifi.read(&ch,1);
            pc.write(&ch,1);
            if(ch == 0x5B){
                sprintf(buffer, "\r\n----- GO -----\r\n");
                pc.write(buffer, strlen(buffer));
                // 1:Green  2:Yellow  3:Red
                led_off(3);
                ThisThread::sleep_for(500ms);
                led_on(1);
                ThisThread::sleep_for(200ms);
            }
            else if(ch==0x5D){
                sprintf(buffer, "\r\n----- STOP -----\r\n");
                pc.write(buffer, strlen(buffer));
                // 1:Green  2:Yellow  3:Red
                led_off(1);
                ThisThread::sleep_for(500ms);
                led_on(2);
                ThisThread::sleep_for(1500ms);
                led_off(2);
                ThisThread::sleep_for(500ms);
                led_on(3);
                ThisThread::sleep_for(200ms);
            }
            else if(ch==0x40){
                sprintf(buffer, "\r\n***** Turn On Street Lamp *****\r\n");
                pc.write(buffer, strlen(buffer));
                // Night Light On
                led_on(4);
                ThisThread::sleep_for(200ms);
                led_on(6);
                ThisThread::sleep_for(200ms);
                led_on(7);
                ThisThread::sleep_for(200ms);
            }
            else if(ch==0x23){
                sprintf(buffer, "\r\n***** Turn Off Street Lamp *****\r\n");
                pc.write(buffer, strlen(buffer));
                // Night Light Off
                led_off(4);
                ThisThread::sleep_for(200ms);
                led_off(6);
                ThisThread::sleep_for(200ms);
                led_off(7);
                ThisThread::sleep_for(200ms);
            }
        }
    }
}

uint16_t ModbusCRC_CheckTable(uint8_t *ptr, uint16_t len)
{
  uint8_t crcHigh = 0xff;
  uint8_t crcLow = 0xff;
  uint16_t index;
  while (len--)
  {
    index = crcLow ^ *ptr++;
    crcLow = crcHigh ^ CRCTableHigh[index];
    crcHigh = CRCTableLow[index];
  }
  return (crcHigh << 8 | crcLow);
}

void led_on(uint8_t address){

  command[2] = 0;
  command[3] = address;
  command[4] = 0xFF;
  command[5] = 0;
  crc = ModbusCRC_CheckTable(command,6);
  command[6] = crc & 0xFF;
  command[7] = crc >> 8;

  modbus.write(command,8);
}

void led_off(uint8_t address){

  command[2] = 0;
  command[3] = address;
  command[4] = 0x00;
  command[5] = 0;
  crc = ModbusCRC_CheckTable(command,6);
  command[6] = crc & 0xFF;
  command[7] = crc >> 8;

  modbus.write(command,8);
}
